{
    "Standard Starter Template": {
        "prefix": "sst",
        "body": [
            "#include <stdio.h>",
            "",
            "int main (int argc, char *argv[]) {",
            "   return 0;",
            "}"
        ],
        "description": "A standard starter template for a C program"
    },
    "Stdlib Variant Starter Template": {
        "prefix": "libsst",
        "body": [
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "",
            "int main (int argc, char *argv[]) {",
            "   return EXIT_SUCCESS;",
            "}"
        ],
        "description": "A standard starter template for a C program with stdlib included"
    },
    "Create linked list": {
        "prefix": "clist",
        "body": [
            "typedef struct _node * Link;",
            "typedef struct _node node;",
            "struct _node {",
            "    int value;",
            "    Link next;",
            "};"
        ],
        "description": "Creates a linked list template"
    },
    "Create int function": {
        "prefix": "intfunc",
        "body": [
            "int $1 () {",
            "   int $0;",
            "   return $0;",
            "}"
        ],
        "description": "Creates a function that returns the int type"
    },
    "Create float function": {
        "prefix": "flfunc",
        "body": [
            "float $2 () {",
            "   float $0;",
            "   return $0;",
            "}"
        ],
        "description": "Creates a function that returns the float type"
    },
    "Create double function": {
        "prefix": "doubfunc",
        "body": [
            "double $2 () {",
            "   double $0;",
            "   return $0;",
            "}"
        ],
        "description": "Creates a function that returns the double type"
    },
    "Create string function": {
        "prefix": "strfunc",
        "body": [
            "char[] $1 () {",
            "   char[] $0 = {};",
            "   return $0;",
            "}"
        ],
        "description": "Creates a function that returns the char array type"
    },
    "Create long function": {
        "prefix": "longfunc",
        "body": [
            "long $1 () {",
            "   long $0;",
            "   return $0;",
            "}"
        ],
        "description": "Creates a function that returns the long type"
    },
    "Print variable of type float (2 decimal places)": {
        "prefix": "pflo",
        "body": [
            "printf(\"$0 :>> %.2f\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type float rounded to 2 decimal places"
    },
    "Print variable of type integer": {
        "prefix": "pint",
        "body": [
            "printf(\"$0 :>> %d\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type signed integer"
    },
    "Print variable of type char": {
        "prefix": "pcha",
        "body": [
            "printf(\"$0 :>> %c\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type char"
    },
    "Print variable of type pointer": {
        "prefix": "ppoint",
        "body": [
            "printf(\"$0 :>> %p\\n\", (void *) $0);"
        ],
        "description": "Calls printf() to log value of variable of type pointer"
    },
    "Print variable of type size_t": {
        "prefix": "psiz",
        "body": [
            "printf(\"$0 :>> %zu\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type size_t"
    },
    "Allocate memory using calloc": {
        "prefix": "cal",
        "body": [
            "$1*ptr = ($1*)calloc($2, sizeof($1));",
            "",
            "if (ptr == NULL)",
            "{",
            "  printf(\"Memory allocation failed!\\n\");",
            "  exit(0);",
            "}",
            "",
            "free(ptr);"
        ],
        "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
    },
    "else if": {
        "prefix": "else if",
        "body": [
            "else if ($1)",
            "{",
            "    $2",
            "}"
        ],
        "description": "Code snippet for else-if statement"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "enum ${$1}",
            "{",
            "    $2",
            "};"
        ],
        "description": "Code snippet for enum"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": [
            "#ifndef ${1:1}",
            "$2",
            "#endif // !$1"
        ],
        "description": "Code snippet for #ifndef"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "typedef struct",
            "{",
            "    $1",
            "} $0;"
        ],
        "description": "Code snippet for struct"
    },
    "#inc": {
        "prefix": "#inc",
        "body": [
            "#include \"$1\""
        ],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": [
            "#include <$1>"
        ],
        "description": "Code snippet for #include \" \""
    },
    "#def": {
        "prefix": "#def",
        "body": [
            "#define \"$1\" \"$2\" "
        ],
        "description": "Code snippet for #define \" \""
    },
    "fun": {
        "prefix": "fun",
        "body": [
            "${1|void,U8,U16,U32|} $2($3)",
            "{",
            "   $0",
            "   return ;",
            "}"
        ],
        "description": "static void fun"
    },
    "static fun": {
        "prefix": "sfun",
        "body": [
            "static ${1|U8,U16,U32|} $2()",
            "{",
            "   $0",
            "   return ;",
            "}"
        ],
        "description": "static void fun"
    },
    "static var": {
        "prefix": "svar",
        "body": [
            "static ${1|U8,U16,U32|} $0 = 0;"
        ],
        "description": "static var"
    },
    "sk debug": {
        "prefix": "skde",
        "body": [
            "SK_DEBUG((\"$1 :>> ${2|%d,%s,0x%x,%p|}\\n\", $1));",
            "$0"
        ],
        "description": "sk debug"
    },
    "sk error": {
        "prefix": "sker",
        "body": [
            "SK_ERROR((\"$1 :>> ${2|%d,%s,0x%x,%p|}\\n\", $1));",
            "$0"
        ],
        "description": "sk error"
    },
    "#if": {
        "prefix": "#if",
        "body": [
            "#if ${1|0,1|} ",
            "    ${0:${TM_SELECTED_TEXT}}",
            "#endif // !$1"
        ],
        "description": "Code snippet for #if"
    },
    "#ifdef": {
        "prefix": "#ifdef",
        "body": [
            "#ifdef $1 ",
            "    ${0:${TM_SELECTED_TEXT}}",
            "#endif // !$1"
        ],
        "description": "Code snippet for #ifdef"
    }
}